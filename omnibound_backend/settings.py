"""
Django settings for omnibound_backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-13-adsh5z!eip1!#$3yx09*kh!$cl*+6n-oa2!1!h4+9ipv^kc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    # 'rest_framework.authtoken', # remove later

    #apps
    'authentication',
    # 'input_data_management',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'omnibound_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'omnibound_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

import os
from pathlib import Path
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '.env')

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('DB_NAME', 'mydb'),
#         'USER': os.getenv('DB_USER', 'myuser'),
#         'PASSWORD': os.getenv('DB_PASSWORD', 'mypassword'),
#         'HOST': os.getenv('DB_HOST'),
#         # 'HOST': 'db', # Docker service name
#         'PORT': os.getenv('DB_PORT', '5432'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.CustomUser'  # Replace 'yourapp' with your app name

# OAuth2 settings
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')
ZOOM_CLIENT_ID = os.getenv('ZOOM_CLIENT_ID')
ZOOM_CLIENT_SECRET = os.getenv('ZOOM_CLIENT_SECRET')
TEAMS_CLIENT_ID = os.getenv('TEAMS_CLIENT_ID')
TEAMS_CLIENT_SECRET = os.getenv('TEAMS_CLIENT_SECRET')
TEAMS_TENANT_ID = os.getenv('TEAMS_TENANT_ID')
ASSEMBLYAI_API_KEY = os.getenv('ASSEMBLYAI_API_KEY')
# GOOGLE_REDIRECT_URI = 'http://localhost:8000/api/auth/google/callback/'
GOOGLE_REDIRECT_URI= "https://django-oauth-app.onrender.com/api/auth/google/callback/"
# https://omnibound.ai/api/auth/google/callback/
# ZOOM_REDIRECT_URI = 'http://localhost:8000/api/auth/zoom/callback/'
ZOOM_REDIRECT_URI= "https://django-oauth-app.onrender.com/api/auth/zoom/callback/"
# https://omnibound.ai/api/auth/google/callback/
# TEAMS_REDIRECT_URI = 'http://localhost:8000/api/auth/teams/callback/'
TEAMS_REDIRECT_URI= "https://django-oauth-app.onrender.com/api/auth/teams/callback/"
# https://omnibound.ai/api/auth/teams/callback/


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        '': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'authentication.backends.ClerkJWTAuthentication',
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
    'DEFAULT_PERMISSION_CLASSES': [
    'rest_framework.permissions.AllowAny',
],
}
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.BasicAuthentication',
#     ],
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ],
# }

# Clerk Settings
CLERK_FRONTEND_API_URL = os.getenv('CLERK_FRONTEND_API_URL')
CLERK_SECRET_KEY = os.getenv('CLERK_SECRET_KEY')
CLERK_WEBHOOK_SECRET = os.getenv('CLERK_WEBHOOK_SECRET')


# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

from django.core.exceptions import ImproperlyConfigured


# settings.py
WEBHOOK_URL = "https://django-oauth-app.onrender.com/api/input-data/google-drive-webhook/"  # Replace with your actual webhook URL
if not WEBHOOK_URL.startswith("https"):
    raise ImproperlyConfigured("WEBHOOK_URL must use HTTPS")


# settings.py

# from omnibound_backend.utils.secrets import get_secret

# # Fetch secrets from AWS
# secrets = get_secret("backend/.env")

# # Set environment variables
# GOOGLE_CLIENT_ID = secrets["GOOGLE_CLIENT_ID"]
# GOOGLE_CLIENT_SECRET = secrets["GOOGLE_CLIENT_SECRET"]
# ZOOM_CLIENT_ID = secrets["ZOOM_CLIENT_ID"]
# ZOOM_CLIENT_SECRET = secrets["ZOOM_CLIENT_SECRET"]
# TEAMS_CLIENT_ID = secrets["TEAMS_CLIENT_ID"]
# TEAMS_CLIENT_SECRET = secrets["TEAMS_CLIENT_SECRET"]
# TEAMS_TENANT_ID = secrets["TEAMS_TENANT_ID"]
# ASSEMBLYAI_API_KEY = secrets["ASSEMBLYAI_API_KEY"]

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': secrets["DB_NAME"],
#         'USER': secrets["DB_USER"],
#         'PASSWORD': secrets["DB_PASSWORD"],
#         'HOST': secrets["DB_HOST"],
#         'PORT': '5432',
#     }
# }